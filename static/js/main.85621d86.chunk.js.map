{"version":3,"sources":["components/TempPicker.js","components/TempDisplay.js","components/ResultTag.js","App.js","serviceWorker.js","index.js"],"names":["TempPicker","react_default","a","createElement","card","className","size","es_radio","Group","defaultValue","this","props","default","onChange","setTempScale","Button","value","Component","TempDisplay","title","extra","tempScale","input","tempValue","setTemp","ResultTag","tag","color","message","conversions","type","convert","t","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setTempQuery","_ref","target","setState","tempQuery","setStudentAnswer","_ref2","studentAnswer","setTempScaleSource","_ref3","tempScaleSource","setTempScaleTarget","_ref4","tempScaleTarget","clearForm","tempResult","response","round","decimals","arguments","length","undefined","Number","Math","convertTemperature","temperature","index","findIndex","c","getOwnPropertyNames","find","k","endingConvIndex","calculateResult","actualResult","_this$state","state","validForm","isNaN","studentResult","components_ResultTag","_this$state2","id","components_TempPicker","components_TempDisplay","es_button","icon","onClick","readOnly","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85621d86.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Card, Radio } from 'antd';\n\nclass TempPicker extends Component {\n  render() {\n    return (\n      <Card className=\"tempPicker\" size=\"small\">\n        <Radio.Group size=\"large\" defaultValue={this.props.default} onChange={this.props.setTempScale}>\n          <Radio.Button value=\"F\"><strong>F</strong>arenheit</Radio.Button>\n          <Radio.Button value=\"C\"><strong>C</strong>elsius</Radio.Button>\n          <Radio.Button value=\"K\"><strong>K</strong>elvin</Radio.Button>\n          <Radio.Button value=\"R\"><strong>R</strong>ankine</Radio.Button>\n        </Radio.Group>\n      </Card>\n    );\n  }\n}\n\nexport default TempPicker;\n","import React, { Component } from 'react';\nimport { Card, Input } from 'antd';\n\nclass TempDisplay extends Component {\n  render() {\n    return (\n      <Card className=\"tempDisplay\" title={this.props.title} extra={'ยบ' + this.props.tempScale}>\n        <Input\n          value={this.props.tempValue}\n          size=\"large\"\n          onChange={this.props.setTemp}\n        />\n      </Card>\n    );\n  }\n}\n\nexport default TempDisplay;\n","import React, { Component } from 'react';\nimport { Tag } from 'antd';\n\nclass ResultTag extends Component {\n  render() {\n    return (\n      <div>Result&nbsp;<Tag color={this.props.color}><strong>{this.props.message}</strong></Tag></div>\n    );\n  }\n}\n\nexport default ResultTag;\n","import React, { Component } from 'react';\nimport { Button, Card, Input } from 'antd';\nimport TempPicker from './components/TempPicker';\nimport TempDisplay from './components/TempDisplay';\nimport ResultTag from './components/ResultTag';\nimport './App.css';\n\nconst conversions = [\n  {\n    type: 'FtoC',\n    convert: t => (t - 32) * 5/9,\n  },\n  {\n    type: 'CtoK',\n    convert: t => t + 273.15,\n  },\n  {\n    type: 'KtoR',\n    convert: t => t * 9/5,\n  },\n  {\n    type: 'RtoF',\n    convert: t => t - 459.67,\n  }\n];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tempQuery: null,\n      studentAnswer: null,\n      tempResult: null,\n      tempScaleSource: 'F',\n      tempScaleTarget: 'C',\n      response: 'Result'\n    };\n  }\n\n  setTempQuery = ({target:{ value }}) => this.setState({tempQuery: value })\n  setStudentAnswer = ({target:{ value }}) => this.setState({studentAnswer: value })\n  setTempScaleSource = ({target:{ value }}) => this.setState({tempScaleSource: value })\n  setTempScaleTarget = ({target:{ value }}) => this.setState({tempScaleTarget: value })\n\n  clearForm = () => {\n    this.setState({\n      tempQuery: null,\n      studentAnswer: null,\n      tempResult: null,\n      response: 'Result'\n    });\n  }\n\n  round = (value, decimals=0) => {\n    return Number(Math.round(value+'e'+decimals)+'e-'+decimals);\n  }\n\n  convertTemperature = (temperature, tempScaleSource, tempScaleTarget) => {\n    if (tempScaleSource !== tempScaleTarget) {\n      let index = conversions.findIndex(c => Object.getOwnPropertyNames(c).find(k => k === 'type' && c[k][0] === tempScaleSource));\n      const endingConvIndex = conversions.findIndex(c => Object.getOwnPropertyNames(c).find(k => k === 'type' && c[k][k.length-1] === tempScaleTarget));\n\n      do {\n        index = index === conversions.length ? 0 : index\n        temperature = conversions[index].convert(temperature);\n      }\n      while(endingConvIndex !== index++)\n    }\n\n    return this.round(temperature);\n  }\n\n  calculateResult = () => {\n    const { tempScaleSource, tempScaleTarget, tempQuery, studentAnswer } = this.state;\n    const validForm = tempQuery && studentAnswer && !isNaN(studentAnswer) && !isNaN(tempQuery);\n\n    let actualResult;\n    if (tempQuery && !isNaN(tempQuery)) {\n      actualResult = this.convertTemperature(tempQuery, tempScaleSource, tempScaleTarget);\n      this.setState({tempResult: actualResult });\n    }\n\n    if (validForm) {\n      const studentResult = this.round(studentAnswer);\n      this.setState({response: actualResult === studentResult ? <ResultTag color=\"green\" message=\"Correct\" /> : <ResultTag color=\"volcano\" message=\"Incorrect\" />});\n    }\n    else this.setState({response: <ResultTag color=\"magenta\" message=\"Invalid\" />});\n  }\n\n  render() {\n    const { tempScaleSource, tempScaleTarget, tempResult, response, tempQuery, studentAnswer } = this.state;\n\n    return (\n      <div id=\"app\">\n        <h1>Temperature Converter</h1>\n\n        <div id=\"tempScaleGroup\">\n          <TempPicker id=\"tempScaleSource\" default=\"F\" setTempScale={this.setTempScaleSource}/>\n          <h2><strong>ยบ{tempScaleSource}</strong> Converted to <strong>ยบ{tempScaleTarget}</strong></h2>\n          <TempPicker id=\"tempScaleTarget\" default=\"C\" setTempScale={this.setTempScaleTarget}/>\n        </div>\n\n        <div id=\"tempDisplayGroup\">\n          <TempDisplay id=\"tempQuery\" title=\"Input Temperature\" tempValue={tempQuery} setTemp={this.setTempQuery} tempScale={tempScaleSource} />\n          <TempDisplay id=\"studentAnswer\" title=\"Student's Answer\" tempValue={studentAnswer} setTemp={this.setStudentAnswer} tempScale={tempScaleTarget} />\n\n          <div id=\"actionGroup\">\n            <Button id=\"checkAnswerBtn\" className=\"actionBtn\" icon=\"check\" type=\"primary\" size=\"large\" onClick={this.calculateResult}>\n              <strong>&nbsp;Check Answer</strong>\n              <h6><i>(Rounded to the ones place)</i></h6>\n            </Button>\n            <Button id=\"clearFormBtn\" className=\"actionBtn\" icon=\"reload\" type=\"danger\" onClick={this.clearForm}>\n              <strong>&nbsp;Clear</strong>\n            </Button>\n          </div>\n\n          <Card className=\"tempDisplay\" title={response} extra={'ยบ' + tempScaleTarget}>\n            <Input\n              value={tempResult}\n              size=\"large\"\n              readOnly={true}\n            />\n          </Card>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}